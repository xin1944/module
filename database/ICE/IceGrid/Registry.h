// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IceGrid_Registry_h__
#define __IceGrid_Registry_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <IceGrid/Exception.h>
#include <IceGrid/Session.h>
#include <IceGrid/Admin.h>
#include <IceUtil/UndefSysMacros.h>
#include <IceGrid/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICE_GRID_API
#   ifdef ICE_GRID_API_EXPORTS
#       define ICE_GRID_API ICE_DECLSPEC_EXPORT
#   elif defined(ICE_STATIC_LIBS)
#       define ICE_GRID_API /**/
#   else
#       define ICE_GRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

namespace IceGrid
{

class Registry;
ICE_GRID_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::Registry>&);
ICE_GRID_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::Registry*);

}

}

namespace IceGrid
{

class Registry;
bool operator==(const Registry&, const Registry&);
bool operator<(const Registry&, const Registry&);
ICE_GRID_API ::Ice::Object* upCast(::IceGrid::Registry*);
typedef ::IceInternal::Handle< ::IceGrid::Registry> RegistryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::Registry> RegistryPrx;
ICE_GRID_API void __patch(RegistryPtr&, const ::Ice::ObjectPtr&);

}

namespace IceAsync
{

}

namespace IceGrid
{

class Callback_Registry_createSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Registry_createSession_Base> Callback_Registry_createSessionPtr;

class Callback_Registry_createAdminSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Registry_createAdminSession_Base> Callback_Registry_createAdminSessionPtr;

class Callback_Registry_createSessionFromSecureConnection_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Registry_createSessionFromSecureConnection_Base> Callback_Registry_createSessionFromSecureConnectionPtr;

class Callback_Registry_createAdminSessionFromSecureConnection_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Registry_createAdminSessionFromSecureConnection_Base> Callback_Registry_createAdminSessionFromSecureConnectionPtr;

class Callback_Registry_getSessionTimeout_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Registry_getSessionTimeout_Base> Callback_Registry_getSessionTimeoutPtr;

class Callback_Registry_getACMTimeout_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Registry_getACMTimeout_Base> Callback_Registry_getACMTimeoutPtr;

}

namespace IceProxy
{

namespace IceGrid
{

class ICE_GRID_API Registry : virtual public ::IceProxy::Ice::Object
{
public:

    ::IceGrid::SessionPrx createSession(const ::std::string& __p_userId, const ::std::string& __p_password)
    {
        return createSession(__p_userId, __p_password, 0);
    }
    ::IceGrid::SessionPrx createSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx)
    {
        return createSession(__p_userId, __p_password, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::IceInternal::Function<void (const ::IceGrid::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createSession(__p_userId, __p_password, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createSession(__p_userId, __p_password, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createSession(__p_userId, __p_password, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createSession(__p_userId, __p_password, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& __p_userId, const ::std::string& __p_password)
    {
        return begin_createSession(__p_userId, __p_password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx)
    {
        return begin_createSession(__p_userId, __p_password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(__p_userId, __p_password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(__p_userId, __p_password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::IceGrid::Callback_Registry_createSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(__p_userId, __p_password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Registry_createSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(__p_userId, __p_password, &__ctx, __del, __cookie);
    }

    ::IceGrid::SessionPrx end_createSession(const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::SessionPrx createSession(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createSession(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::AdminSessionPrx createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password)
    {
        return createAdminSession(__p_userId, __p_password, 0);
    }
    ::IceGrid::AdminSessionPrx createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx)
    {
        return createAdminSession(__p_userId, __p_password, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::IceInternal::Function<void (const ::IceGrid::AdminSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createAdminSession(__p_userId, __p_password, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createAdminSession(__p_userId, __p_password, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::AdminSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createAdminSession(__p_userId, __p_password, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createAdminSession(__p_userId, __p_password, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::AdminSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password)
    {
        return begin_createAdminSession(__p_userId, __p_password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx)
    {
        return begin_createAdminSession(__p_userId, __p_password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAdminSession(__p_userId, __p_password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAdminSession(__p_userId, __p_password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::IceGrid::Callback_Registry_createAdminSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAdminSession(__p_userId, __p_password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createAdminSession(const ::std::string& __p_userId, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Registry_createAdminSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAdminSession(__p_userId, __p_password, &__ctx, __del, __cookie);
    }

    ::IceGrid::AdminSessionPrx end_createAdminSession(const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::AdminSessionPrx createAdminSession(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createAdminSession(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::SessionPrx createSessionFromSecureConnection()
    {
        return createSessionFromSecureConnection(0);
    }
    ::IceGrid::SessionPrx createSessionFromSecureConnection(const ::Ice::Context& __ctx)
    {
        return createSessionFromSecureConnection(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createSessionFromSecureConnection(const ::IceInternal::Function<void (const ::IceGrid::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createSessionFromSecureConnection(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createSessionFromSecureConnection(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createSessionFromSecureConnection(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createSessionFromSecureConnection(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createSessionFromSecureConnection(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createSessionFromSecureConnection(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection()
    {
        return begin_createSessionFromSecureConnection(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::Ice::Context& __ctx)
    {
        return begin_createSessionFromSecureConnection(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSessionFromSecureConnection(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSessionFromSecureConnection(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::IceGrid::Callback_Registry_createSessionFromSecureConnectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSessionFromSecureConnection(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Registry_createSessionFromSecureConnectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSessionFromSecureConnection(&__ctx, __del, __cookie);
    }

    ::IceGrid::SessionPrx end_createSessionFromSecureConnection(const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::SessionPrx createSessionFromSecureConnection(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::AdminSessionPrx createAdminSessionFromSecureConnection()
    {
        return createAdminSessionFromSecureConnection(0);
    }
    ::IceGrid::AdminSessionPrx createAdminSessionFromSecureConnection(const ::Ice::Context& __ctx)
    {
        return createAdminSessionFromSecureConnection(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createAdminSessionFromSecureConnection(const ::IceInternal::Function<void (const ::IceGrid::AdminSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createAdminSessionFromSecureConnection(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createAdminSessionFromSecureConnection(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createAdminSessionFromSecureConnection(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createAdminSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::AdminSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createAdminSessionFromSecureConnection(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createAdminSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createAdminSessionFromSecureConnection(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createAdminSessionFromSecureConnection(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::AdminSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createAdminSessionFromSecureConnection()
    {
        return begin_createAdminSessionFromSecureConnection(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createAdminSessionFromSecureConnection(const ::Ice::Context& __ctx)
    {
        return begin_createAdminSessionFromSecureConnection(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createAdminSessionFromSecureConnection(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAdminSessionFromSecureConnection(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createAdminSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAdminSessionFromSecureConnection(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createAdminSessionFromSecureConnection(const ::IceGrid::Callback_Registry_createAdminSessionFromSecureConnectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAdminSessionFromSecureConnection(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createAdminSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Registry_createAdminSessionFromSecureConnectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAdminSessionFromSecureConnection(&__ctx, __del, __cookie);
    }

    ::IceGrid::AdminSessionPrx end_createAdminSessionFromSecureConnection(const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::AdminSessionPrx createAdminSessionFromSecureConnection(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createAdminSessionFromSecureConnection(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getSessionTimeout()
    {
        return getSessionTimeout(0);
    }
    ::Ice::Int getSessionTimeout(const ::Ice::Context& __ctx)
    {
        return getSessionTimeout(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSessionTimeout(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSessionTimeout(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSessionTimeout(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSessionTimeout(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSessionTimeout(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSessionTimeout()
    {
        return begin_getSessionTimeout(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context& __ctx)
    {
        return begin_getSessionTimeout(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::IceGrid::Callback_Registry_getSessionTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Registry_getSessionTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getSessionTimeout(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getSessionTimeout(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getACMTimeout()
    {
        return getACMTimeout(0);
    }
    ::Ice::Int getACMTimeout(const ::Ice::Context& __ctx)
    {
        return getACMTimeout(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getACMTimeout(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getACMTimeout(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getACMTimeout(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getACMTimeout(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getACMTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getACMTimeout(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getACMTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getACMTimeout(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getACMTimeout(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getACMTimeout()
    {
        return begin_getACMTimeout(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getACMTimeout(const ::Ice::Context& __ctx)
    {
        return begin_getACMTimeout(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getACMTimeout(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getACMTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getACMTimeout(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getACMTimeout(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getACMTimeout(const ::IceGrid::Callback_Registry_getACMTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getACMTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getACMTimeout(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Registry_getACMTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getACMTimeout(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getACMTimeout(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getACMTimeout(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getACMTimeout(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Registry> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_secure(bool __secure) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_twoway() const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_oneway() const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_batchOneway() const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_datagram() const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_batchDatagram() const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_compress(bool __compress) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Registry> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Registry*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceGrid
{

class ICE_GRID_API Registry : virtual public ::Ice::Object
{
public:

    typedef RegistryPrx ProxyType;
    typedef RegistryPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::IceGrid::SessionPrx createSession(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::IceGrid::AdminSessionPrx createAdminSession(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createAdminSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::IceGrid::SessionPrx createSessionFromSecureConnection(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createSessionFromSecureConnection(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::IceGrid::AdminSessionPrx createAdminSessionFromSecureConnection(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createAdminSessionFromSecureConnection(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getSessionTimeout(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getSessionTimeout(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::Int getACMTimeout(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getACMTimeout(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Registry& l, const Registry& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Registry& l, const Registry& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace IceGrid
{

template<class T>
class CallbackNC_Registry_createSession : public Callback_Registry_createSession_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::SessionPrx&);

    CallbackNC_Registry_createSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_createSession(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Registry_createSessionPtr
newCallback_Registry_createSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_createSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Registry_createSessionPtr
newCallback_Registry_createSession(T* instance, void (T::*cb)(const ::IceGrid::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_createSession<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Registry_createSession : public Callback_Registry_createSession_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::SessionPrx&, const CT&);

    Callback_Registry_createSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_createSession(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Registry_createSessionPtr
newCallback_Registry_createSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_createSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Registry_createSessionPtr
newCallback_Registry_createSession(T* instance, void (T::*cb)(const ::IceGrid::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_createSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Registry_createAdminSession : public Callback_Registry_createAdminSession_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::AdminSessionPrx&);

    CallbackNC_Registry_createAdminSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::AdminSessionPrx __ret;
        try
        {
            __ret = __proxy->end_createAdminSession(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Registry_createAdminSessionPtr
newCallback_Registry_createAdminSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::AdminSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_createAdminSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Registry_createAdminSessionPtr
newCallback_Registry_createAdminSession(T* instance, void (T::*cb)(const ::IceGrid::AdminSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_createAdminSession<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Registry_createAdminSession : public Callback_Registry_createAdminSession_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::AdminSessionPrx&, const CT&);

    Callback_Registry_createAdminSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::AdminSessionPrx __ret;
        try
        {
            __ret = __proxy->end_createAdminSession(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Registry_createAdminSessionPtr
newCallback_Registry_createAdminSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::AdminSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_createAdminSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Registry_createAdminSessionPtr
newCallback_Registry_createAdminSession(T* instance, void (T::*cb)(const ::IceGrid::AdminSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_createAdminSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Registry_createSessionFromSecureConnection : public Callback_Registry_createSessionFromSecureConnection_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::SessionPrx&);

    CallbackNC_Registry_createSessionFromSecureConnection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_createSessionFromSecureConnection(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Registry_createSessionFromSecureConnectionPtr
newCallback_Registry_createSessionFromSecureConnection(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_createSessionFromSecureConnection<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Registry_createSessionFromSecureConnectionPtr
newCallback_Registry_createSessionFromSecureConnection(T* instance, void (T::*cb)(const ::IceGrid::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_createSessionFromSecureConnection<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Registry_createSessionFromSecureConnection : public Callback_Registry_createSessionFromSecureConnection_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::SessionPrx&, const CT&);

    Callback_Registry_createSessionFromSecureConnection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_createSessionFromSecureConnection(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Registry_createSessionFromSecureConnectionPtr
newCallback_Registry_createSessionFromSecureConnection(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_createSessionFromSecureConnection<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Registry_createSessionFromSecureConnectionPtr
newCallback_Registry_createSessionFromSecureConnection(T* instance, void (T::*cb)(const ::IceGrid::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_createSessionFromSecureConnection<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Registry_createAdminSessionFromSecureConnection : public Callback_Registry_createAdminSessionFromSecureConnection_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::AdminSessionPrx&);

    CallbackNC_Registry_createAdminSessionFromSecureConnection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::AdminSessionPrx __ret;
        try
        {
            __ret = __proxy->end_createAdminSessionFromSecureConnection(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Registry_createAdminSessionFromSecureConnectionPtr
newCallback_Registry_createAdminSessionFromSecureConnection(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::AdminSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_createAdminSessionFromSecureConnection<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Registry_createAdminSessionFromSecureConnectionPtr
newCallback_Registry_createAdminSessionFromSecureConnection(T* instance, void (T::*cb)(const ::IceGrid::AdminSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_createAdminSessionFromSecureConnection<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Registry_createAdminSessionFromSecureConnection : public Callback_Registry_createAdminSessionFromSecureConnection_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::AdminSessionPrx&, const CT&);

    Callback_Registry_createAdminSessionFromSecureConnection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::AdminSessionPrx __ret;
        try
        {
            __ret = __proxy->end_createAdminSessionFromSecureConnection(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Registry_createAdminSessionFromSecureConnectionPtr
newCallback_Registry_createAdminSessionFromSecureConnection(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::AdminSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_createAdminSessionFromSecureConnection<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Registry_createAdminSessionFromSecureConnectionPtr
newCallback_Registry_createAdminSessionFromSecureConnection(T* instance, void (T::*cb)(const ::IceGrid::AdminSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_createAdminSessionFromSecureConnection<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Registry_getSessionTimeout : public Callback_Registry_getSessionTimeout_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Registry_getSessionTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getSessionTimeout(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Registry_getSessionTimeoutPtr
newCallback_Registry_getSessionTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_getSessionTimeout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Registry_getSessionTimeoutPtr
newCallback_Registry_getSessionTimeout(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_getSessionTimeout<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Registry_getSessionTimeout : public Callback_Registry_getSessionTimeout_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Registry_getSessionTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getSessionTimeout(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Registry_getSessionTimeoutPtr
newCallback_Registry_getSessionTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_getSessionTimeout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Registry_getSessionTimeoutPtr
newCallback_Registry_getSessionTimeout(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_getSessionTimeout<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Registry_getACMTimeout : public Callback_Registry_getACMTimeout_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Registry_getACMTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getACMTimeout(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Registry_getACMTimeoutPtr
newCallback_Registry_getACMTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_getACMTimeout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Registry_getACMTimeoutPtr
newCallback_Registry_getACMTimeout(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Registry_getACMTimeout<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Registry_getACMTimeout : public Callback_Registry_getACMTimeout_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Registry_getACMTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::RegistryPrx __proxy = ::IceGrid::RegistryPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getACMTimeout(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Registry_getACMTimeoutPtr
newCallback_Registry_getACMTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_getACMTimeout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Registry_getACMTimeoutPtr
newCallback_Registry_getACMTimeout(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Registry_getACMTimeout<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
