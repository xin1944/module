// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IcePatch2_FileServer_h__
#define __IcePatch2_FileServer_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IcePatch2/FileInfo.h>
#include <IceUtil/UndefSysMacros.h>
#include <IcePatch2/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICE_PATCH2_API
#   ifdef ICE_PATCH2_API_EXPORTS
#       define ICE_PATCH2_API ICE_DECLSPEC_EXPORT
#   elif defined(ICE_STATIC_LIBS)
#       define ICE_PATCH2_API /**/
#   else
#       define ICE_PATCH2_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

namespace IcePatch2
{

class FileServer;
ICE_PATCH2_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IcePatch2::FileServer>&);
ICE_PATCH2_API ::IceProxy::Ice::Object* upCast(::IceProxy::IcePatch2::FileServer*);

}

}

namespace IcePatch2
{

class FileServer;
bool operator==(const FileServer&, const FileServer&);
bool operator<(const FileServer&, const FileServer&);
ICE_PATCH2_API ::Ice::Object* upCast(::IcePatch2::FileServer*);
typedef ::IceInternal::Handle< ::IcePatch2::FileServer> FileServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IcePatch2::FileServer> FileServerPrx;
ICE_PATCH2_API void __patch(FileServerPtr&, const ::Ice::ObjectPtr&);

}

namespace IcePatch2
{

typedef ::std::vector< ::Ice::ByteSeq> ByteSeqSeq;

class ICE_PATCH2_API PartitionOutOfRangeException : public ::Ice::UserException
{
public:

    PartitionOutOfRangeException() {}
    virtual ~PartitionOutOfRangeException() throw();

    virtual ::std::string ice_name() const;
    virtual PartitionOutOfRangeException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

static PartitionOutOfRangeException __PartitionOutOfRangeException_init;

class ICE_PATCH2_API FileAccessException : public ::Ice::UserException
{
public:

    FileAccessException() {}
    explicit FileAccessException(const ::std::string&);
    virtual ~FileAccessException() throw();

    virtual ::std::string ice_name() const;
    virtual FileAccessException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string reason;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

class ICE_PATCH2_API FileSizeRangeException : public ::IcePatch2::FileAccessException
{
public:

    FileSizeRangeException() {}
    explicit FileSizeRangeException(const ::std::string&);
    virtual ~FileSizeRangeException() throw();

    virtual ::std::string ice_name() const;
    virtual FileSizeRangeException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::IcePatch2::FileAccessException::__writeImpl;
    using ::IcePatch2::FileAccessException::__readImpl;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::IcePatch2::PartitionOutOfRangeException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::IcePatch2::FileAccessException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::IcePatch2::FileSizeRangeException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace IcePatch2
{

class ICE_PATCH2_API AMD_FileServer_getFileCompressed : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&) = 0;
};

typedef ::IceUtil::Handle< ::IcePatch2::AMD_FileServer_getFileCompressed> AMD_FileServer_getFileCompressedPtr;

class ICE_PATCH2_API AMD_FileServer_getLargeFileCompressed : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&) = 0;
};

typedef ::IceUtil::Handle< ::IcePatch2::AMD_FileServer_getLargeFileCompressed> AMD_FileServer_getLargeFileCompressedPtr;

}

namespace IceAsync
{

namespace IcePatch2
{

class ICE_PATCH2_API AMD_FileServer_getFileCompressed : public ::IcePatch2::AMD_FileServer_getFileCompressed, public ::IceInternal::IncomingAsync
{
public:

    AMD_FileServer_getFileCompressed(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class ICE_PATCH2_API AMD_FileServer_getLargeFileCompressed : public ::IcePatch2::AMD_FileServer_getLargeFileCompressed, public ::IceInternal::IncomingAsync
{
public:

    AMD_FileServer_getLargeFileCompressed(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

namespace IcePatch2
{

class Callback_FileServer_getFileInfoSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getFileInfoSeq_Base> Callback_FileServer_getFileInfoSeqPtr;

class Callback_FileServer_getLargeFileInfoSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getLargeFileInfoSeq_Base> Callback_FileServer_getLargeFileInfoSeqPtr;

class Callback_FileServer_getChecksumSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getChecksumSeq_Base> Callback_FileServer_getChecksumSeqPtr;

class Callback_FileServer_getChecksum_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getChecksum_Base> Callback_FileServer_getChecksumPtr;

class Callback_FileServer_getFileCompressed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getFileCompressed_Base> Callback_FileServer_getFileCompressedPtr;

class Callback_FileServer_getLargeFileCompressed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileServer_getLargeFileCompressed_Base> Callback_FileServer_getLargeFileCompressedPtr;

}

namespace IceProxy
{

namespace IcePatch2
{

class ICE_PATCH2_API FileServer : virtual public ::IceProxy::Ice::Object
{
public:

    ICE_DEPRECATED_API("getFileInfoSeq() is deprecated, use getLargeFileInfoSeq() instead.") ::IcePatch2::FileInfoSeq getFileInfoSeq(::Ice::Int __p_partition)
    {
        return getFileInfoSeq(__p_partition, 0);
    }
    ICE_DEPRECATED_API("getFileInfoSeq() is deprecated, use getLargeFileInfoSeq() instead.") ::IcePatch2::FileInfoSeq getFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx)
    {
        return getFileInfoSeq(__p_partition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFileInfoSeq(::Ice::Int __p_partition, const ::IceInternal::Function<void (const ::IcePatch2::FileInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileInfoSeq(__p_partition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileInfoSeq(::Ice::Int __p_partition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileInfoSeq(__p_partition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IcePatch2::FileInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileInfoSeq(__p_partition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileInfoSeq(__p_partition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IcePatch2::FileInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFileInfoSeq(::Ice::Int __p_partition)
    {
        return begin_getFileInfoSeq(__p_partition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx)
    {
        return begin_getFileInfoSeq(__p_partition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileInfoSeq(::Ice::Int __p_partition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfoSeq(__p_partition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfoSeq(__p_partition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileInfoSeq(::Ice::Int __p_partition, const ::IcePatch2::Callback_FileServer_getFileInfoSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfoSeq(__p_partition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx, const ::IcePatch2::Callback_FileServer_getFileInfoSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileInfoSeq(__p_partition, &__ctx, __del, __cookie);
    }

    ::IcePatch2::FileInfoSeq end_getFileInfoSeq(const ::Ice::AsyncResultPtr&);
    
private:

    ::IcePatch2::FileInfoSeq getFileInfoSeq(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFileInfoSeq(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IcePatch2::LargeFileInfoSeq getLargeFileInfoSeq(::Ice::Int __p_partition)
    {
        return getLargeFileInfoSeq(__p_partition, 0);
    }
    ::IcePatch2::LargeFileInfoSeq getLargeFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx)
    {
        return getLargeFileInfoSeq(__p_partition, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLargeFileInfoSeq(::Ice::Int __p_partition, const ::IceInternal::Function<void (const ::IcePatch2::LargeFileInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLargeFileInfoSeq(__p_partition, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLargeFileInfoSeq(::Ice::Int __p_partition, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLargeFileInfoSeq(__p_partition, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLargeFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IcePatch2::LargeFileInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLargeFileInfoSeq(__p_partition, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLargeFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLargeFileInfoSeq(__p_partition, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLargeFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IcePatch2::LargeFileInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLargeFileInfoSeq(::Ice::Int __p_partition)
    {
        return begin_getLargeFileInfoSeq(__p_partition, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLargeFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx)
    {
        return begin_getLargeFileInfoSeq(__p_partition, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLargeFileInfoSeq(::Ice::Int __p_partition, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLargeFileInfoSeq(__p_partition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLargeFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLargeFileInfoSeq(__p_partition, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLargeFileInfoSeq(::Ice::Int __p_partition, const ::IcePatch2::Callback_FileServer_getLargeFileInfoSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLargeFileInfoSeq(__p_partition, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLargeFileInfoSeq(::Ice::Int __p_partition, const ::Ice::Context& __ctx, const ::IcePatch2::Callback_FileServer_getLargeFileInfoSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLargeFileInfoSeq(__p_partition, &__ctx, __del, __cookie);
    }

    ::IcePatch2::LargeFileInfoSeq end_getLargeFileInfoSeq(const ::Ice::AsyncResultPtr&);
    
private:

    ::IcePatch2::LargeFileInfoSeq getLargeFileInfoSeq(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLargeFileInfoSeq(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IcePatch2::ByteSeqSeq getChecksumSeq()
    {
        return getChecksumSeq(0);
    }
    ::IcePatch2::ByteSeqSeq getChecksumSeq(const ::Ice::Context& __ctx)
    {
        return getChecksumSeq(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getChecksumSeq(const ::IceInternal::Function<void (const ::IcePatch2::ByteSeqSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getChecksumSeq(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getChecksumSeq(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getChecksumSeq(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getChecksumSeq(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IcePatch2::ByteSeqSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getChecksumSeq(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getChecksumSeq(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getChecksumSeq(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getChecksumSeq(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IcePatch2::ByteSeqSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getChecksumSeq()
    {
        return begin_getChecksumSeq(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChecksumSeq(const ::Ice::Context& __ctx)
    {
        return begin_getChecksumSeq(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChecksumSeq(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChecksumSeq(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChecksumSeq(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChecksumSeq(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChecksumSeq(const ::IcePatch2::Callback_FileServer_getChecksumSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChecksumSeq(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChecksumSeq(const ::Ice::Context& __ctx, const ::IcePatch2::Callback_FileServer_getChecksumSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChecksumSeq(&__ctx, __del, __cookie);
    }

    ::IcePatch2::ByteSeqSeq end_getChecksumSeq(const ::Ice::AsyncResultPtr&);
    
private:

    ::IcePatch2::ByteSeqSeq getChecksumSeq(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getChecksumSeq(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::ByteSeq getChecksum()
    {
        return getChecksum(0);
    }
    ::Ice::ByteSeq getChecksum(const ::Ice::Context& __ctx)
    {
        return getChecksum(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getChecksum(const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getChecksum(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getChecksum(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getChecksum(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getChecksum(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getChecksum(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getChecksum(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getChecksum(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getChecksum(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getChecksum()
    {
        return begin_getChecksum(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChecksum(const ::Ice::Context& __ctx)
    {
        return begin_getChecksum(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getChecksum(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChecksum(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChecksum(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChecksum(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChecksum(const ::IcePatch2::Callback_FileServer_getChecksumPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChecksum(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getChecksum(const ::Ice::Context& __ctx, const ::IcePatch2::Callback_FileServer_getChecksumPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getChecksum(&__ctx, __del, __cookie);
    }

    ::Ice::ByteSeq end_getChecksum(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ByteSeq getChecksum(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getChecksum(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ICE_DEPRECATED_API("getFileCompressed() is deprecated, use getLargeFileCompressed() instead.") ::Ice::ByteSeq getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num)
    {
        return getFileCompressed(__p_path, __p_pos, __p_num, 0);
    }
    ICE_DEPRECATED_API("getFileCompressed() is deprecated, use getLargeFileCompressed() instead.") ::Ice::ByteSeq getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx)
    {
        return getFileCompressed(__p_path, __p_pos, __p_num, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num, const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileCompressed(__p_path, __p_pos, __p_num, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileCompressed(__p_path, __p_pos, __p_num, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileCompressed(__p_path, __p_pos, __p_num, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileCompressed(__p_path, __p_pos, __p_num, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num)
    {
        return begin_getFileCompressed(__p_path, __p_pos, __p_num, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx)
    {
        return begin_getFileCompressed(__p_path, __p_pos, __p_num, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileCompressed(__p_path, __p_pos, __p_num, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileCompressed(__p_path, __p_pos, __p_num, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num, const ::IcePatch2::Callback_FileServer_getFileCompressedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileCompressed(__p_path, __p_pos, __p_num, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileCompressed(const ::std::string& __p_path, ::Ice::Int __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::IcePatch2::Callback_FileServer_getFileCompressedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileCompressed(__p_path, __p_pos, __p_num, &__ctx, __del, __cookie);
    }

    ::Ice::ByteSeq end_getFileCompressed(const ::Ice::AsyncResultPtr&);

     void ___end_getFileCompressed(::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ByteSeq getFileCompressed(const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFileCompressed(const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::ByteSeq getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num)
    {
        return getLargeFileCompressed(__p_path, __p_pos, __p_num, 0);
    }
    ::Ice::ByteSeq getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx)
    {
        return getLargeFileCompressed(__p_path, __p_pos, __p_num, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num, const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLargeFileCompressed(__p_path, __p_pos, __p_num, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLargeFileCompressed(__p_path, __p_pos, __p_num, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLargeFileCompressed(__p_path, __p_pos, __p_num, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLargeFileCompressed(__p_path, __p_pos, __p_num, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num)
    {
        return begin_getLargeFileCompressed(__p_path, __p_pos, __p_num, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx)
    {
        return begin_getLargeFileCompressed(__p_path, __p_pos, __p_num, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLargeFileCompressed(__p_path, __p_pos, __p_num, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLargeFileCompressed(__p_path, __p_pos, __p_num, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num, const ::IcePatch2::Callback_FileServer_getLargeFileCompressedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLargeFileCompressed(__p_path, __p_pos, __p_num, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLargeFileCompressed(const ::std::string& __p_path, ::Ice::Long __p_pos, ::Ice::Int __p_num, const ::Ice::Context& __ctx, const ::IcePatch2::Callback_FileServer_getLargeFileCompressedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLargeFileCompressed(__p_path, __p_pos, __p_num, &__ctx, __del, __cookie);
    }

    ::Ice::ByteSeq end_getLargeFileCompressed(const ::Ice::AsyncResultPtr&);

     void ___end_getLargeFileCompressed(::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ByteSeq getLargeFileCompressed(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLargeFileCompressed(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FileServer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_secure(bool __secure) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_twoway() const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_oneway() const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_batchOneway() const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_datagram() const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_batchDatagram() const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_compress(bool __compress) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FileServer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FileServer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IcePatch2
{

class ICE_PATCH2_API FileServer : virtual public ::Ice::Object
{
public:

    typedef FileServerPrx ProxyType;
    typedef FileServerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    ICE_DEPRECATED_API("getFileInfoSeq() is deprecated, use getLargeFileInfoSeq() instead.") virtual ::IcePatch2::FileInfoSeq getFileInfoSeq(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getFileInfoSeq(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::IcePatch2::LargeFileInfoSeq getLargeFileInfoSeq(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getLargeFileInfoSeq(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::IcePatch2::ByteSeqSeq getChecksumSeq(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getChecksumSeq(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::ByteSeq getChecksum(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getChecksum(::IceInternal::Incoming&, const ::Ice::Current&) const;

    ICE_DEPRECATED_API("getFileCompressed() is deprecated, use getLargeFileCompressed() instead.") virtual void getFileCompressed_async(const ::IcePatch2::AMD_FileServer_getFileCompressedPtr&, const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getFileCompressed(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void getLargeFileCompressed_async(const ::IcePatch2::AMD_FileServer_getLargeFileCompressedPtr&, const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getLargeFileCompressed(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const FileServer& l, const FileServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FileServer& l, const FileServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace IcePatch2
{

template<class T>
class CallbackNC_FileServer_getFileInfoSeq : public Callback_FileServer_getFileInfoSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IcePatch2::FileInfoSeq&);

    CallbackNC_FileServer_getFileInfoSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::IcePatch2::FileInfoSeq __ret;
        try
        {
            __ret = __proxy->end_getFileInfoSeq(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_FileServer_getFileInfoSeqPtr
newCallback_FileServer_getFileInfoSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IcePatch2::FileInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getFileInfoSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getFileInfoSeqPtr
newCallback_FileServer_getFileInfoSeq(T* instance, void (T::*cb)(const ::IcePatch2::FileInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getFileInfoSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getFileInfoSeq : public Callback_FileServer_getFileInfoSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IcePatch2::FileInfoSeq&, const CT&);

    Callback_FileServer_getFileInfoSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::IcePatch2::FileInfoSeq __ret;
        try
        {
            __ret = __proxy->end_getFileInfoSeq(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_FileServer_getFileInfoSeqPtr
newCallback_FileServer_getFileInfoSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IcePatch2::FileInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getFileInfoSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getFileInfoSeqPtr
newCallback_FileServer_getFileInfoSeq(T* instance, void (T::*cb)(const ::IcePatch2::FileInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getFileInfoSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getLargeFileInfoSeq : public Callback_FileServer_getLargeFileInfoSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IcePatch2::LargeFileInfoSeq&);

    CallbackNC_FileServer_getLargeFileInfoSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::IcePatch2::LargeFileInfoSeq __ret;
        try
        {
            __ret = __proxy->end_getLargeFileInfoSeq(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_FileServer_getLargeFileInfoSeqPtr
newCallback_FileServer_getLargeFileInfoSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IcePatch2::LargeFileInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getLargeFileInfoSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getLargeFileInfoSeqPtr
newCallback_FileServer_getLargeFileInfoSeq(T* instance, void (T::*cb)(const ::IcePatch2::LargeFileInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getLargeFileInfoSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getLargeFileInfoSeq : public Callback_FileServer_getLargeFileInfoSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IcePatch2::LargeFileInfoSeq&, const CT&);

    Callback_FileServer_getLargeFileInfoSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::IcePatch2::LargeFileInfoSeq __ret;
        try
        {
            __ret = __proxy->end_getLargeFileInfoSeq(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_FileServer_getLargeFileInfoSeqPtr
newCallback_FileServer_getLargeFileInfoSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IcePatch2::LargeFileInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getLargeFileInfoSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getLargeFileInfoSeqPtr
newCallback_FileServer_getLargeFileInfoSeq(T* instance, void (T::*cb)(const ::IcePatch2::LargeFileInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getLargeFileInfoSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getChecksumSeq : public Callback_FileServer_getChecksumSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IcePatch2::ByteSeqSeq&);

    CallbackNC_FileServer_getChecksumSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::IcePatch2::ByteSeqSeq __ret;
        try
        {
            __ret = __proxy->end_getChecksumSeq(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_FileServer_getChecksumSeqPtr
newCallback_FileServer_getChecksumSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IcePatch2::ByteSeqSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getChecksumSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getChecksumSeqPtr
newCallback_FileServer_getChecksumSeq(T* instance, void (T::*cb)(const ::IcePatch2::ByteSeqSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getChecksumSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getChecksumSeq : public Callback_FileServer_getChecksumSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IcePatch2::ByteSeqSeq&, const CT&);

    Callback_FileServer_getChecksumSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::IcePatch2::ByteSeqSeq __ret;
        try
        {
            __ret = __proxy->end_getChecksumSeq(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_FileServer_getChecksumSeqPtr
newCallback_FileServer_getChecksumSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IcePatch2::ByteSeqSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getChecksumSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getChecksumSeqPtr
newCallback_FileServer_getChecksumSeq(T* instance, void (T::*cb)(const ::IcePatch2::ByteSeqSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getChecksumSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getChecksum : public Callback_FileServer_getChecksum_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ByteSeq&);

    CallbackNC_FileServer_getChecksum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_getChecksum(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_FileServer_getChecksumPtr
newCallback_FileServer_getChecksum(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getChecksum<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getChecksumPtr
newCallback_FileServer_getChecksum(T* instance, void (T::*cb)(const ::Ice::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getChecksum<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getChecksum : public Callback_FileServer_getChecksum_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ByteSeq&, const CT&);

    Callback_FileServer_getChecksum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_getChecksum(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_FileServer_getChecksumPtr
newCallback_FileServer_getChecksum(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getChecksum<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getChecksumPtr
newCallback_FileServer_getChecksum(T* instance, void (T::*cb)(const ::Ice::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getChecksum<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getFileCompressed : public Callback_FileServer_getFileCompressed_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&);

    CallbackNC_FileServer_getFileCompressed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> __ret;
        try
        {
            __proxy->___end_getFileCompressed(__ret, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_FileServer_getFileCompressedPtr
newCallback_FileServer_getFileCompressed(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getFileCompressed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getFileCompressedPtr
newCallback_FileServer_getFileCompressed(T* instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getFileCompressed<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getFileCompressed : public Callback_FileServer_getFileCompressed_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&);

    Callback_FileServer_getFileCompressed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> __ret;
        try
        {
            __proxy->___end_getFileCompressed(__ret, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_FileServer_getFileCompressedPtr
newCallback_FileServer_getFileCompressed(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getFileCompressed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getFileCompressedPtr
newCallback_FileServer_getFileCompressed(T* instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getFileCompressed<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileServer_getLargeFileCompressed : public Callback_FileServer_getLargeFileCompressed_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&);

    CallbackNC_FileServer_getLargeFileCompressed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> __ret;
        try
        {
            __proxy->___end_getLargeFileCompressed(__ret, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_FileServer_getLargeFileCompressedPtr
newCallback_FileServer_getLargeFileCompressed(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getLargeFileCompressed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileServer_getLargeFileCompressedPtr
newCallback_FileServer_getLargeFileCompressed(T* instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileServer_getLargeFileCompressed<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileServer_getLargeFileCompressed : public Callback_FileServer_getLargeFileCompressed_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&);

    Callback_FileServer_getLargeFileCompressed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IcePatch2::FileServerPrx __proxy = ::IcePatch2::FileServerPrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> __ret;
        try
        {
            __proxy->___end_getLargeFileCompressed(__ret, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_FileServer_getLargeFileCompressedPtr
newCallback_FileServer_getLargeFileCompressed(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getLargeFileCompressed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileServer_getLargeFileCompressedPtr
newCallback_FileServer_getLargeFileCompressed(T* instance, void (T::*cb)(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileServer_getLargeFileCompressed<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
